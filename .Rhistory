install.packages("pkgdown")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site_github_pages()
pkgdown:::deploy_local()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
"`r Sys.Date()`"
r Sys.Date()
Sys.Date()
blogdown:::preview_site()
---
date: Sys.Date()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
knitr::opts_chunk$set(echo = TRUE, encoding = "UTF-8")
options(tinytex.verbose = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/Biosignal/Documents/IMIM/recurrence_CRC")
library(lme4) ### Always load other packages for p value extraction
library(lmerTest)
library(emmeans)
library(performance)
library(dplyr)
library(doParallel)
library(MUVR)
library(mixOmics)
library(OptimalCutpoints)
library(pROC)
library(stringr)
library(questionr)
library(survival)
library(survminer)
library(lubridate)
recurrence <- foreign::read.spss("Dades cliniques.sav",
to.data.frame = TRUE,
max.value.labels = TRUE
)
# recurrence <- recurrence[order(recurrence$NomenclaturaMostres),]
levels(as.factor((recurrence$RecurrènciaSíNo)))
sum(recurrence$RecurrènciaSíNo == "1")
sum(recurrence$RecurrènciaSíNo == "0")
paste0(24/(126 + 24)*100, " %")
recurrence$DataRecurrència
pss2date <- function(x) as.Date(x/86400, origin = "1582-10-14")
recurrence$DataRecurrència <- pss2date(recurrence$DataRecurrència)
recurrence$DataIQ <- pss2date(recurrence$DataIQ)
replace_missings <- function(x, replacement) {
# Change the name of the y argument to replacement
x[is.na(x)] <- replacement
cat(sum(is.na(x)), replacement, "\n")
x
}
# replace NA in a column in dataframe
recurrence$DataRecurrència <- replace_missings(recurrence$DataRecurrència, "2022-10-05")
recurrence$DataRecurrència
days <- function(dob,
age.day = today(),
units = "days",
floor = TRUE) {
calc.age = interval(dob, age.day) / duration(num = 1, units = units)
if (floor) return(as.integer(floor(calc.age)))
return(calc.age)
}
IDs <- read.csv("C:/Users/Biosignal/Documents/IMIM/recurrence_CRC/IDs.csv")
## Eliminar los espacios en blanco invisibles
recurrence$NomenclaturaMostres <- gsub(" ", "", recurrence$NomenclaturaMostres, fixed = TRUE)
recurrence <- merge(IDs, recurrence, by = "NomenclaturaMostres")
# deltaLOG2 <- read.csv("C:/Users/Biosignal/Documents/IMIM/Colorectal/deltaLOG2.csv")
# data <- merge(recurrence, deltaLOG2[,-2:-128], by = "PACIENT")
Bnorm <- read.csv("C:/Users/Biosignal/Documents/IMIM/recurrence_CRC/Database_baseline/Bnorm.csv", check.names = FALSE)
dataB <- merge(recurrence, Bnorm[,-2:-63], by = "PACIENT")
dataB$NomenclaturaMostres <- days(dataB$DataIQ, age.day = dataB$DataRecurrència)
colnames(dataB)[2] <- "daysTOrecurrence"
plot_multi_histogram <- function(df, feature, label_column) {
plt <- ggplot(df, aes(x=eval(parse(text=feature)), fill=eval(parse(text=label_column)))) +
geom_histogram(alpha=0.4, position="identity", aes(y = ..density..), color= "black") +
geom_density(alpha=0.4) +
geom_vline(aes(xintercept=mean(eval(parse(text=feature)))), color="grey", linetype="dashed", size=1) +
labs(x=feature, y = "Density")
plt + guides(fill=guide_legend(title=label_column))
}
plot_multi_histogram(dataB, "daysTOrecurrence", "RecurrènciaSíNo")
as.numeric(as.character(dataB$RecurrènciaSíNo))
as.numeric(as.character(dataB$InfeccióIntraabdominal))
pca_plot <- pca((dataB[,-1:-127]), ncomp=2, center=TRUE, scale=TRUE)
p1 <- plotIndiv (pca_plot,
style = "ggplot2",
ind.names= dataB$daysTOrecurrence,
# col.per.group = c("red", "blue", "orange"),
group= dataB$RecurrènciaSíNo,
legend = TRUE,
title  = "")
p1 <- p1$graph
p1 + theme(strip.text.x = element_blank(),
strip.background = element_blank()
) +   expand_limits(x = c(-5, 10.5), y = c(-2, 2)) ## Ajustar encuadre
all <- c("InfeccióIntraabdominal", "GrauHistològic", "InvasióPerineural", "CEApreIQ", "Estadi", "InvasióLimfovascular","RecurrènciaSíNo", "Sexe", "pT")
covariables <- c("InfeccióIntraabdominal", "GrauHistològic", "InvasióPerineural", "CEApreIQ", "Estadi", "InvasióLimfovascular")
relevantes <- c("RecurrènciaSíNo", "Sexe")
excluded <- c("Sexe", "pT")
library(reshape2)
dataB$InvasióPerineural
# chisq.test(table(dataB[,"Sexe"], dataB$RecurrènciaSíNo))
tabla <- reshape2::melt(dataB[covariables], id.vars = c("RecurrènciaSíNo", "Sexe", "InfeccióIntraabdominal", "GrauHistològic", "InvasióPerineural"))
library("Hmisc")
pca <- pca(dataB[,all], ncomp=2, center=TRUE, scale=TRUE)
meta_matrix <- pca[["X"]]
coeff <- data.frame(rcorr(as.matrix(meta_matrix), type=c("spearman"))[1])
nm <- names(coeff)
new <- stringr::str_remove(nm, "r.")
names(coeff) <- new
coeff <- coeff[-1:-4, 1:4]
#
# ########## valor p de las correlaciones
# y <- data.frame(rcorr(as.matrix(dataFecundante[,-1]), type=c("spearman"))[3])
# y <- y[-1:-8, 1:8]
#
#
# fdr <- function(x){p.adjust(x, method = "fdr")}
# FDRcorr <- apply(data.matrix(y), 2, fdr)
#
# colnames(coeff)
#
# obj.cim <- cim(as.matrix(coeff),
#                xlab = "", ylab = "",
#                cutoff = 0.5,
#                row.cex = 0.8,
#                # col.sideColors = c(1:8),
#                col.cex = 0.55,
#                margins = c(5, 9),
#                save = "png", name.save	= "heatmapFecundante_sinAA052"
# )
#
# write.csv(coeff, "corr_coeff_Fecundante_sinAA2.csv")
# write.csv(y, "corr_p_Fecundante_sinAA2.csv")
blogdown:::preview_site()
blogdown:::preview_site()
